#!/usr/bin/env python

import argparse
import subprocess
import cogent
import os
from cogent.app import fasttree
from cogent.phylo import nj, distance
from cogent.evolve.models import JTT92
from Bio import Align, AlignIO, SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

def is_noisy(seq):

    seq_len = len(seq)

    # Check if more than 50 % indels
    indel = seq.count('-')
    if indel > seq_len / 2:
        return True

    # Check if at least 50 % of amino acids are unique
    amino = dict((letter,seq.count(letter)) for letter in set(seq))
    if len(amino) > seq_len / 2:
        return True

    # Check if any amino acids appear more than twice
    num_amino = amino.values()
    if all(i < 3 for i in num_amino):
        return True

    return False

def remove_noise(msa):

    num_col = len(msa[0])
    cols = [msa[:,col] for col in range(num_col)]

    valid_index = []

    for col in cols:
        if not is_noisy(col):
            valid_index.append(cols.index(col))

    filtered_msa = []

    for record in msa:
        seq = ('').join([record.seq[i] for i in valid_index])
        filtered_msa.append(SeqRecord(Seq(str(seq)), str(record.id), str(record.name), str(record.description)))

    assert filtered_msa, 'All sequences were noisy, exiting program'

    return Align.MultipleSeqAlignment(filtered_msa)

# def gen_tree(infile,output_tree):
#
#     aln = cogent.LoadSeqs(data=infile, aligned=True, moltype=cogent.PROTEIN, label_to_name=lambda x: x.split()[0])
#     print(aln)
#
    # sm = JTT92()
    # dist = distance.EstimateDistances(aln, submodel=sm)
    # dist.run()
    # tree = nj.nj(dist.getPairwiseDistances())
#
#     tree = fasttree.build_tree_from_alignment(aln,moltype=cogent.PROTEIN)
#     print(tree)
#     tree.writeToFile(output_tree,format='newick')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Remove noise and compute'
                         'trees for both the original and filtered alignment')

    parser.add_argument('input',help='Input file in fasta format')
    parser.add_argument('output',help='Output file for the filtered alignment')

    args = parser.parse_args()

    input_name = './' + args.input
    #input_name = args.input
    input_file = open(input_name,'r')
    orig_alignment = AlignIO.read(input_file,'fasta')
    filtered_alignment = remove_noise(orig_alignment)

    output_name = './filtered_msa/' + args.output.split('/')[1] + '/' + args.output.split('/')[2]
    #output_name = args.output
    output_file = open(output_name,'w+')

    AlignIO.write(filtered_alignment,output_file,'fasta')

    #orig_tree_file = '.'.join(input_name.split('.')[:-1]) + '.tree'
    #filtered_tree_file = '.'.join(output_name.split('.')[:-1]) + '.tree'
    #gen_tree(orig_alignment.format('fasta'),'orig_tree_file')
    #gen_tree(filtered_alignment.format('fasta'),'filtered_tree_file')

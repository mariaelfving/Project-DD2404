#!/usr/bin/env python

import argparse
import subprocess
import cogent
import os
from cogent.app import fasttree
from cogent.phylo import nj, distance
from cogent.evolve.models import JTT92
from Bio import Align, AlignIO, SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

def is_noisy(seq):

    seq_len = len(seq)  # Length of the sequence

    # Check if more than 50 % indels
    indel = seq.count('-')
    if indel > seq_len / 2:
        return True

    # Check if at least 50 % of amino acids are unique
    amino = dict((letter,seq.count(letter)) for letter in seq)
    if len(amino) >= seq_len / 2:
        return True

    # Check if any amino acids appear more than twice
    seq = seq.translate(None,'-')
    amino = dict((letter,seq.count(letter)) for letter in seq)
    num_amino = amino.values()
    if all(i < 3 for i in num_amino):
        return True

    return False

def remove_noise(msa):

    # Calculate number of columns and construct them in the list 'cols'
    num_col = len(msa[0])
    cols = [msa[:,col] for col in range(num_col)]

    valid_index = []

    # Check every column in 'cols' to see if it is noisy
    # If not noisy, append the list 'valid_columns'
    for col in cols:
        if not is_noisy(col):
            valid_index.append(cols.index(col))

    filtered_msa = []

    # Recreate the filtered sequences and append them to the list 'filtered_msa'
    for record in msa:
        seq = ('').join([record.seq[i] for i in valid_index])
        filtered_msa.append(SeqRecord(Seq(str(seq)), str(record.id), str(record.name), str(record.description)))

    # If all sequences were noisy, exit with a message saying so
    assert filtered_msa, 'All sequences were noisy, exiting program'

    # Make the filtered sequences into a multiple sequence alignment
    return Align.MultipleSeqAlignment(filtered_msa)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Remove noise and compute'
                         'trees for both the original and filtered alignment')

    parser.add_argument('input',help='Input file in fasta format')
    parser.add_argument('output',help='Output file for the filtered alignment')

    args = parser.parse_args()

    # Retrieve and open the input file
    # Open the original alignment and filter it
    input_name = './' + args.input
    input_file = open(input_name,'r')
    orig_alignment = AlignIO.read(input_file,'fasta')
    filtered_alignment = remove_noise(orig_alignment)

    # Create the output in an appropriate place and write the result to that file
    output_name = './filtered_msa/' + args.output.split('/')[1] + '/' + args.output.split('/')[2]
    output_file = open(output_name,'w+')

    AlignIO.write(filtered_alignment,output_file,'fasta')
